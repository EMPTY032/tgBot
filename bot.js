require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

let activeSystem = false;

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã",
  },
  {
    command: "stop",
    description: "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
  },
  {
    command: "share",
    description: "—Ç–µ—Å—Ç—ã",
  },
  {
    command: "inline_keyboard",
    description: "—Ç–µ—Å—Ç—ã",
  },
  {
    command: "rylet",
    description: "–∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å—Å—è",
  },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—å—é",
  },
]);

bot.command("start", async (ctx) => {
  // console.log(ctx.command.text); –∫–æ–º–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫—É
  if (activeSystem) {
    await ctx.reply("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞");
  } else {
    activeSystem = true;
    await ctx.reply("–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞");
  }
});

bot.command("stop", async (ctx) => {
  if (!activeSystem) {
    await ctx.reply("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞");
  } else {
    activeSystem = false;
    bot.stop();
    await ctx.reply("–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞");
  }
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–û–±—Ä–∞—Ç–∏—Ç—å—è –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support");
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é ", {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery("order-status", async (ctx) => {
  await ctx.callbackQuery.message.editText("–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  })
});
bot.callbackQuery("support", async (ctx) => {
  await ctx.callbackQuery.message.editText("–£ –Ω–∞—Å –µ–µ –Ω–µ—Ç —Å–æ—Ä–∏", {
    reply_markup: backKeyboard,
  })
});
bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  })
});

bot.command("mood", async (ctx) => {
  // const moodKeyboard = new Keyboard()
  //   .text("–•–æ—Ä–æ—à–æ")
  //   .row()
  //   .text("–ù–æ—Ä–º–∞–ª—å–Ω–æ")
  //   .row()
  //   .text("–ü–ª–æ—Ö–æ")
  //   .row()
  //   .resized()
  //   .oneTime();

  const moodLabels = ["–•–æ—Ä–æ—à–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"];
  const rows = moodLabels.map((label) => {
    return [Keyboard.text(label)];
  });
  const moodKeyboard2 = Keyboard.from(rows).resized();
  await ctx.reply("–∫–∞–∫ –≤–∞—à—å –¥–µ–Ω—å", {
    reply_markup: moodKeyboard2,
  });
});

bot.command("share", async (ctx) => {
  const shareKeyboard = new Keyboard()
    .requestLocation("–¢–µ—Å—Ç1")
    .requestContact("–¢–µ—Å—Ç2")
    .requestPoll("–¢–µ—Å—Ç3")
    .placeholder("–º–∏–º–∏–º–∞–º–æ–º—É")
    .resized()
    .oneTime();

  await ctx.reply("–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞", {
    reply_markup: shareKeyboard,
  });
});

bot.command("inline_keyboard", async (ctx) => {
  // const inlineKeyboard = new InlineKeyboard()
  //   .text("1", "button1")
  //   .text("2", "button2")
  //   .text("3", "button3");

  const inlineKeyboard2 = new InlineKeyboard().url(
    "–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª",
    "https://t.me/xosiaox"
  );

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", {
    reply_markup: inlineKeyboard2,
  });
});

bot.callbackQuery(/button[1-3]/, async (ctx) => {
  ctx.answerCallbackQuery("ZZZZZZZZZZZZZZZZZZZ");
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É: " + ctx.callbackQuery.data);
});

bot.on(":contact", async (ctx) => {
  const contact = ctx.message.contact;
  const phoneNumber = contact.phone_number;
  const firstName = contact.first_name;
  const lastName = contact.last_name;

  await ctx.reply(
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} ${lastName} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º ${phoneNumber}`
  );
  console.log(contact);
});

bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
  ctx.reply("–•–æ—Ä–æ—à–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–æ");
});

bot.hears("–ù–æ—Ä–º–∞–ª—å–Ω–æ", async (ctx) => {
  ctx.reply("–ù–æ—Ä–º–∞–ª—å–Ω–æ —ç—Ç–æ –µ—â—ë —Ö–æ—Ä–æ—à–æ");
});

bot.hears("–ü–ª–æ—Ö–æ", async (ctx) => {
  ctx.reply("–ü–ª–æ—Ö–æ —ç—Ç–æ –Ω–µ —Ö–æ—Ä–æ—à–æ");
});

bot.command("rylet", async (ctx) => {
  ctx.reply("–í—Ä–∞—â–∞–µ–º –±–∞—Ä–∞–±–∞–Ω");
  const randomN = Math.floor(Math.random() * 6) + 1;
  setTimeout(() => {
    if (4 == randomN) {
      ctx.reply("–í—ã –º–µ—Ä—Ç–≤—ã");
      console.log("–§–æ—Ä—Ç—É–Ω–∞ –Ω–µ —É–ª—ã–±–Ω—É–ª–∞—Å—å –∏–≥—Ä–æ–∫—É ", ctx.message.from);
    } else {
      ctx.reply("–í–∞–º –ø–æ–≤–µ–∑–ª–æ");
      console.log("–§–æ—Ä—Ç—É–Ω–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –∏–≥—Ä–æ–∫—É ", ctx.message.from);
    }
  }, 3000);
});

bot.hears([`–ø–∏–Ω–≥`, `–ø–æ–Ω–≥`], async (ctx) => {
  if (ctx.msg.text == `–ø–∏–Ω–≥`) {
    await ctx.reply(`–ø–æ–Ω–≥`);
  } else {
    await ctx.reply("–ø–∏–Ω–≥");
  }
});

bot.hears(["ID", "id"], async (ctx) => {
  await ctx.reply(ctx.from.id, {
    reply_parameters: { message_id: ctx.msg.message_id },
  });
});

bot.on("message:text", async (ctx) => {
  console.log(
    "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    ctx.message.text,
    `–æ—Ç ${ctx.from.username}`
  );
  await ctx.react("üëå");
  await ctx.reply(`<b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –æ—Ç ${ctx.from.username}`, {
    parse_mode: "HTML",
  });
});

bot.on("message:voice", async (ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", ctx.message.voice);
  await ctx.reply(
    "–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–µ —É–º–µ—é —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ, –Ω–æ –µ—Å–ª–∏ –≤–∞–º –±—É–¥–µ—Ç –ª–µ–≥—á–µ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–º–µ–µ—Ç—å—Å—è —Å –Ω–∏—Ö <3"
  );
});

bot.on("message:media", async (ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ", ctx.message.photo);
  await ctx.reply("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ");
});

bot.on("msg", (ctx) => {
  console.log("–ø–æ–ª—É—á–µ–Ω–Ω–æ —á—Ç–æ —Ç–æ? -", ctx.text);
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(ctx);
  console.error(`–£–ø—Å, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –µ–±–ª–∞–Ω –ø–æ—Ç–æ–º—É —á—Ç–æ ${ctx.update.update_id}`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ", e.description);
  } else if (e instanceof HttpError) {
    console.error("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º—É", e);
  } else {
    console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞?!", e);
  }
});

bot.start();
